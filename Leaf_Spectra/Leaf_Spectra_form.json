{
  "assignment_enabled": false,
  "auto_assign": false,
  "bounding_box": [
    45.4078957,
    -75.6642138,
    46.77392,
    -71.063335
  ],
  "created_at": "2018-06-23T00:41:45Z",
  "description": "Measurements of leaf spectral properties using an integrating sphere.",
  "elements": [
    {
      "data_name": "bulk_leaf_sample",
      "default_value": null,
      "description": null,
      "disabled": false,
      "display": "inline",
      "elements": [
        {
          "allow_creating_records": false,
          "allow_existing_records": true,
          "allow_multiple_records": false,
          "allow_updating_records": false,
          "data_name": "filter_site",
          "default_previous_value": true,
          "default_value": null,
          "description": "The site within which the subplot is located. Used as a filter to only show bulk leaf samples collected in the selected site.",
          "disabled": false,
          "form_id": "",
          "hidden": false,
          "key": "60c6",
          "label": "Filter: Site",
          "record_conditions": [
            {
              "linked_form_field_key": "@status",
              "operator": "not_equal_to",
              "value": "deleted"
            }
          ],
          "record_conditions_type": "all",
          "record_defaults": [
            {
              "destination_field_key": "b4b8",
              "source_field_key": "33f0"
            }
          ],
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "RecordLinkField",
          "visible_conditions": [
            {
              "field_key": "a012",
              "operator": "is_empty",
              "value": ""
            }
          ],
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": "all"
        },
        {
          "data_name": "filter_site_id",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": true,
          "key": "b4b8",
          "label": "Filter: Site ID",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": "[a-zA-Z0-9.-]+",
          "pattern_description": "Alphanumeric Only",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "allow_creating_records": false,
          "allow_existing_records": true,
          "allow_multiple_records": false,
          "allow_updating_records": false,
          "data_name": "sample",
          "default_previous_value": false,
          "default_value": null,
          "description": "The leaf sample on which spectral properties are measured.",
          "disabled": false,
          "form_id": "",
          "hidden": false,
          "key": "a012",
          "label": "Sample",
          "record_conditions": [
            {
              "linked_form_field_key": "28b1",
              "operator": "equal_to",
              "value_field_key": "b4b8"
            },
            {
              "linked_form_field_key": "@status",
              "operator": "not_equal_to",
              "value": "deleted"
            }
          ],
          "record_conditions_type": "all",
          "record_defaults": [
            {
              "destination_field_key": "269d",
              "source_field_key": "c66b"
            },
            {
              "destination_field_key": "6989",
              "source_field_key": "28b1"
            },
            {
              "destination_field_key": "a950",
              "source_field_key": "5722"
            }
          ],
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "RecordLinkField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "sample_remarks",
          "default_previous_value": false,
          "default_value": null,
          "description": "Comments or notes about the sample.",
          "disabled": false,
          "hidden": false,
          "key": "2334",
          "label": "Sample Remarks",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": "[a-zA-Z0-9.-]+",
          "pattern_description": "Alphanumeric Only",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "site_id",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": true,
          "hidden": true,
          "key": "6989",
          "label": "Site ID",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "sample_id",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": true,
          "hidden": true,
          "key": "269d",
          "label": "Sample ID",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "scientific_name",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": true,
          "key": "a950",
          "label": "Scientific Name",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        }
      ],
      "hidden": false,
      "key": "e0a3",
      "label": "Bulk Leaf Sample",
      "required": false,
      "required_conditions": null,
      "required_conditions_type": null,
      "type": "Section",
      "visible_conditions": null,
      "visible_conditions_behavior": "clear",
      "visible_conditions_type": null
    },
    {
      "data_name": "measurement_event",
      "default_value": null,
      "description": null,
      "disabled": false,
      "display": "inline",
      "elements": [
        {
          "data_name": "date_measured",
          "default_previous_value": true,
          "default_value": null,
          "description": "The date when leaf spectra were measured on the sample.",
          "disabled": false,
          "hidden": false,
          "key": "8680",
          "label": "Date Measured",
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "DateTimeField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "allow_other": true,
          "choice_list_id": "",
          "data_name": "measured_by",
          "default_previous_value": false,
          "default_value": null,
          "description": "A list of names of people responsible for the spectral measurements. The primary collector should be listed first.",
          "disabled": false,
          "hidden": false,
          "key": "2f84",
          "label": "Measured By",
          "max_length": null,
          "min_length": null,
          "multiple": true,
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "ChoiceField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "spectroradiometer_start_time",
          "default_previous_value": true,
          "default_value": null,
          "description": "The time of day at which the spectroradiometer was turned on.",
          "disabled": false,
          "hidden": false,
          "key": "07e0",
          "label": "Spectroradiometer Start Time",
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TimeField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "event_remarks",
          "default_previous_value": false,
          "default_value": null,
          "description": "Comments or notes about the measurement event.",
          "disabled": false,
          "hidden": false,
          "key": "a081",
          "label": "Event Remarks",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        }
      ],
      "hidden": false,
      "key": "4100",
      "label": "Measurement Event",
      "required": false,
      "required_conditions": null,
      "required_conditions_type": null,
      "type": "Section",
      "visible_conditions": null,
      "visible_conditions_behavior": "clear",
      "visible_conditions_type": null
    },
    {
      "data_name": "equipment",
      "default_value": null,
      "description": null,
      "disabled": false,
      "display": "inline",
      "elements": [
        {
          "allow_creating_records": true,
          "allow_existing_records": true,
          "allow_multiple_records": false,
          "allow_updating_records": false,
          "data_name": "computer",
          "default_previous_value": true,
          "default_value": null,
          "description": "The computer (e.g., laptop, PDA) used to operate the spectrometer.",
          "disabled": false,
          "form_id": "",
          "hidden": false,
          "key": "e0d9",
          "label": "Computer",
          "record_conditions": null,
          "record_conditions_type": null,
          "record_defaults": [
            {
              "destination_field_key": "560b",
              "source_field_key": "b5e6"
            }
          ],
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "RecordLinkField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "computer_type",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": true,
          "hidden": true,
          "key": "560b",
          "label": "Computer Type",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "allow_creating_records": true,
          "allow_existing_records": true,
          "allow_multiple_records": false,
          "allow_updating_records": false,
          "data_name": "spectroradiometer_id",
          "default_previous_value": true,
          "default_value": null,
          "description": "The spectroradiometer used to make the spectral measurements.",
          "disabled": false,
          "form_id": "",
          "hidden": false,
          "key": "e3b9",
          "label": "Spectroradiometer",
          "record_conditions": null,
          "record_conditions_type": null,
          "record_defaults": [
            {
              "destination_field_key": "7c72",
              "source_field_key": "3963"
            },
            {
              "destination_field_key": "3371",
              "source_field_key": "b5bb"
            }
          ],
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "RecordLinkField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "manufacturer_short_name",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": true,
          "hidden": true,
          "key": "7c72",
          "label": "Manufacturer Short Name",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "serial_number",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": true,
          "hidden": true,
          "key": "3371",
          "label": "Serial Number",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "allow_creating_records": true,
          "allow_existing_records": true,
          "allow_multiple_records": false,
          "allow_updating_records": false,
          "data_name": "instrumentation_id",
          "default_previous_value": true,
          "default_value": null,
          "description": "The instrumentation (e.g., integrating sphere) used to make the spectral measurements.",
          "disabled": false,
          "form_id": "",
          "hidden": false,
          "key": "b28e",
          "label": "Instrumentation",
          "record_conditions": [
            {
              "linked_form_field_key": "57fe",
              "operator": "equal_to",
              "value": "integrating sphere"
            },
            {
              "linked_form_field_key": "cee4",
              "operator": "equal_to",
              "value_field_key": "7c72"
            }
          ],
          "record_conditions_type": "all",
          "record_defaults": [
            {
              "destination_field_key": "547e",
              "source_field_key": "57fe"
            },
            {
              "destination_field_key": "aa77",
              "source_field_key": "cee4"
            }
          ],
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "RecordLinkField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "manufacturer_short_name_sphere",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": true,
          "hidden": true,
          "key": "aa77",
          "label": "Manufacturer Short Name (Sphere)",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "instrumentation_type",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": true,
          "hidden": true,
          "key": "547e",
          "label": "Instrumentation Type",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "allow_creating_records": true,
          "allow_existing_records": true,
          "allow_multiple_records": false,
          "allow_updating_records": false,
          "data_name": "panel_id",
          "default_previous_value": true,
          "default_value": null,
          "description": "The reference panel (e.g. Spectralon calibrated reflectance standard) used to measure reference radiance.",
          "disabled": false,
          "form_id": "",
          "hidden": false,
          "key": "4f69",
          "label": "Reference Panel",
          "record_conditions": null,
          "record_conditions_type": null,
          "record_defaults": null,
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "RecordLinkField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        }
      ],
      "hidden": false,
      "key": "7ff9",
      "label": "Equipment",
      "required": false,
      "required_conditions": null,
      "required_conditions_type": null,
      "type": "Section",
      "visible_conditions": null,
      "visible_conditions_behavior": "clear",
      "visible_conditions_type": null
    },
    {
      "data_name": "folders_and_files",
      "default_value": null,
      "description": null,
      "disabled": false,
      "display": "inline",
      "elements": [
        {
          "data_name": "parent_directory",
          "default_previous_value": true,
          "default_value": null,
          "description": "The parent directory in which the  current working folder is stored.\n\nDefaults to the Project ID / spectra.\n\nThis parent directory must be in the shared Google Drive folder.",
          "disabled": true,
          "hidden": false,
          "key": "0ec3",
          "label": "Parent Directory",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": "([^\\r\\n]+)(?!\\r|\\n)",
          "pattern_description": "Single Line Only",
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "working_folder",
          "default_previous_value": false,
          "default_value": null,
          "description": "The name of the folder where scan files are saved. \n\nDefaults to YYYY-MM-DD-Site ID-Spetroradiometer serial number, where  YYYY-MM-DD is the measurement date.\n\nThe working folder must be stored directly within the parent directory above.",
          "disabled": true,
          "hidden": false,
          "key": "5926",
          "label": "Working Folder",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": "([^\\r\\n]+)(?!\\r|\\n)",
          "pattern_description": "Single Line Only",
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "base_file_name",
          "default_previous_value": false,
          "default_value": null,
          "description": "The base of the filename used with an incremental extension.\n\nDetermined automatically based on spectroradiomater manufacturer, computer type and measurement date.",
          "disabled": true,
          "hidden": false,
          "key": "cc95",
          "label": "Base File Name",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": "([^\\r\\n]+)(?!\\r|\\n)",
          "pattern_description": "Single Line Only",
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        }
      ],
      "hidden": false,
      "key": "2e08",
      "label": "Folders and Files",
      "required": false,
      "required_conditions": null,
      "required_conditions_type": null,
      "type": "Section",
      "visible_conditions": [
        {
          "field_key": "8680",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "e0d9",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "e3b9",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "b28e",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "4f69",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "a012",
          "operator": "is_not_empty",
          "value": ""
        }
      ],
      "visible_conditions_behavior": "clear",
      "visible_conditions_type": "all"
    },
    {
      "data_name": "integrating_sphere_protocol",
      "default_value": null,
      "description": null,
      "disabled": false,
      "display": "inline",
      "elements": [
        {
          "data_name": "leaf_larger_than_port",
          "default_previous_value": true,
          "default_value": "yes",
          "description": "Is the area of a single leaf larger than that of the sample port of the sphere? If not, a protocol to estimate the gap fraction is required.",
          "disabled": false,
          "hidden": false,
          "key": "4fe4",
          "label": "Leaf Larger than Port?",
          "negative": {
            "label": "No",
            "value": "no"
          },
          "neutral": {
            "label": "N/A",
            "value": "n/a"
          },
          "neutral_enabled": false,
          "positive": {
            "label": "Yes",
            "value": "yes"
          },
          "required": true,
          "required_conditions": [
            {
              "field_key": "547e",
              "operator": "equal_to",
              "value": "integrating sphere"
            }
          ],
          "required_conditions_type": "all",
          "type": "YesNoField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "allow_other": true,
          "choices": [
            {
              "label": "label",
              "value": "dataname"
            }
          ],
          "data_name": "protocol",
          "default_previous_value": false,
          "default_value": null,
          "description": "The protocol used to measure leaf spectral reflectance and/or transmittance using an integrating sphere.",
          "disabled": false,
          "hidden": false,
          "key": "6a09",
          "label": "Protocol",
          "multiple": false,
          "required": true,
          "required_conditions": [
            {
              "field_key": "547e",
              "operator": "equal_to",
              "value": "integrating sphere"
            }
          ],
          "required_conditions_type": "all",
          "type": "ChoiceField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "allow_other": false,
          "choices": [
            {
              "label": "SVC Large Leaves",
              "value": "https://dx.doi.org/10.17504/protocols.io.p8pdrvn"
            },
            {
              "label": "SVC Small Leaves",
              "value": "https://dx.doi.org/10.17504/protocols.io.q56dy9e"
            }
          ],
          "data_name": "protocols",
          "default_previous_value": false,
          "default_value": null,
          "description": "Protocols for the administrator.\nIt is used to fulfill Protocol",
          "disabled": false,
          "hidden": true,
          "key": "fa72",
          "label": "Protocols List",
          "multiple": false,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "ChoiceField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "protocol_url",
          "default_url": "",
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "4fef",
          "label": "Protocol URL",
          "required": false,
          "required_conditions": [],
          "required_conditions_type": null,
          "type": "HyperlinkField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        }
      ],
      "hidden": false,
      "key": "fe83",
      "label": "Integrating Sphere Protocol",
      "required": false,
      "required_conditions": null,
      "required_conditions_type": null,
      "type": "Section",
      "visible_conditions": [
        {
          "field_key": "547e",
          "operator": "equal_to",
          "value": "integrating sphere"
        },
        {
          "field_key": "e0d9",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "e3b9",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "b28e",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "4f69",
          "operator": "is_not_empty",
          "value": ""
        },
        {
          "field_key": "a012",
          "operator": "is_not_empty",
          "value": ""
        }
      ],
      "visible_conditions_behavior": "clear",
      "visible_conditions_type": "all"
    },
    {
      "data_name": "spectral_measurements",
      "default_value": null,
      "description": null,
      "disabled": false,
      "display": "inline",
      "elements": [
        {
          "data_name": "properties_measured",
          "default_previous_value": false,
          "default_value": "both",
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "35ec",
          "label": "Properties Measured",
          "negative": {
            "label": "Transmittance",
            "value": "transmittance"
          },
          "neutral": {
            "label": "Both",
            "value": "both"
          },
          "neutral_enabled": true,
          "positive": {
            "label": "Reflectance",
            "value": "reflectance"
          },
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "YesNoField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "allow_other": false,
          "choices": [
            {
              "label": "Adaxial (upper)",
              "value": "Adaxial (upper)"
            },
            {
              "label": "Abaxial (lower)",
              "value": "Abaxial (lower)"
            },
            {
              "label": "Not bifacial",
              "value": "Not bifacial"
            }
          ],
          "data_name": "leaf_sides_measured",
          "default_previous_value": true,
          "default_value": "Adaxial (upper)",
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "a40b",
          "label": "Leaf Sides Measured",
          "max_length": null,
          "min_length": null,
          "multiple": true,
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "ChoiceField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "measurements",
          "default_value": null,
          "description": null,
          "disabled": false,
          "elements": [
            {
              "data_name": "file",
              "default_value": null,
              "description": null,
              "disabled": false,
              "display": "inline",
              "elements": [
                {
                  "data_name": "file_name",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "The full name of the scan file, without the extension.",
                  "disabled": true,
                  "hidden": false,
                  "key": "bbe5",
                  "label": "File Name",
                  "max_length": null,
                  "min_length": null,
                  "numeric": false,
                  "pattern": "([^\\r\\n]+)[a-zA-Z0-9_]+(?!\\r|\\n)",
                  "pattern_description": "Single Line Only",
                  "required": true,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "TextField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                },
                {
                  "data_name": "file_name_value",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "The full name of the scan file, without the extension.",
                  "disabled": false,
                  "display": {
                    "currency": null,
                    "style": "text"
                  },
                  "expression": "if ($base_file_name) {\n  if ($spectrum_number) {\n    $base_file_name+getNumber($spectrum_number);\n  } else if ($saved_spectrum_number){\n    $base_file_name+getNumber($saved_spectrum_number);\n  } else {\n    '';\n  }\n}\nfunction getNumber(num){\n  if (num.length<2) num='00'+num;\n  if (num.length==2) num='0'+num;\n  return \"_\"+num;\n}",
                  "hidden": true,
                  "key": "768c",
                  "label": "File Name Value",
                  "required": false,
                  "required_conditions": [],
                  "required_conditions_type": null,
                  "type": "CalculatedField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                },
                {
                  "data_name": "spectrum_number",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "The number that gets added automatically at the end of the base file name by the software in auto-save mode.",
                  "disabled": false,
                  "format": "integer",
                  "hidden": false,
                  "key": "47ee",
                  "label": "Spectrum Number",
                  "max": 99999.0,
                  "max_length": null,
                  "min": 0.0,
                  "min_length": null,
                  "numeric": true,
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "TextField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                }
              ],
              "hidden": false,
              "key": "2847",
              "label": "File",
              "required": false,
              "required_conditions": null,
              "required_conditions_type": null,
              "type": "Section",
              "visible_conditions": null,
              "visible_conditions_behavior": "clear",
              "visible_conditions_type": null
            },
            {
              "data_name": "integrating_sphere_configuration_svc",
              "default_value": null,
              "description": null,
              "disabled": false,
              "display": "inline",
              "elements": [
                {
                  "allow_other": false,
                  "choices": [
                    {
                      "label": "A: Reflectance",
                      "value": "A: Reflectance"
                    },
                    {
                      "label": "B: Reflectance",
                      "value": "B: Reflectance"
                    },
                    {
                      "label": "C: Reflectance",
                      "value": "C: Reflectance"
                    },
                    {
                      "label": "D: Transmittance",
                      "value": "D: Transmittance"
                    },
                    {
                      "label": "E: Transmittance",
                      "value": "E: Transmittance"
                    }
                  ],
                  "data_name": "sphere_configuration_svc_large_leaves",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "Sphere configuration as defined in the SVC large leaf spectroscopy protocol.",
                  "disabled": false,
                  "hidden": false,
                  "key": "cfdd",
                  "label": "Sphere Configuration (Large Leaves)",
                  "multiple": false,
                  "required": true,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "ChoiceField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                },
                {
                  "allow_other": false,
                  "choices": [
                    {
                      "label": "A: Reflectance",
                      "value": "A: Reflectance"
                    },
                    {
                      "label": "B: Reflectance",
                      "value": "B: Reflectance"
                    },
                    {
                      "label": "C: Reflectance",
                      "value": "C: Reflectance"
                    },
                    {
                      "label": "D: Reflectance",
                      "value": "D: Reflectance"
                    },
                    {
                      "label": "E: Reflectance",
                      "value": "E: Reflectance"
                    },
                    {
                      "label": "F: Reflectance",
                      "value": "F: Reflectance"
                    },
                    {
                      "label": "G: Reflectance",
                      "value": "G: Reflectance"
                    },
                    {
                      "label": "H: Transmittance",
                      "value": "H: Transmittance"
                    },
                    {
                      "label": "I: Transmittance",
                      "value": "I: Transmittance"
                    }
                  ],
                  "data_name": "sphere_configuration_svc_small_leaves",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "Sphere configuration as defined in the SVC small leaf spectroscopy protocol.",
                  "disabled": false,
                  "hidden": false,
                  "key": "0cd8",
                  "label": "Sphere Configuration (Small Leaves)",
                  "multiple": false,
                  "required": true,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "ChoiceField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                },
                {
                  "allow_other": false,
                  "choices": [
                    {
                      "label": "lamp",
                      "value": "lamp"
                    },
                    {
                      "label": "plug",
                      "value": "plug"
                    }
                  ],
                  "data_name": "primary_light_port_svc",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": null,
                  "disabled": true,
                  "hidden": false,
                  "key": "cf12",
                  "label": "Primary Light Port",
                  "multiple": false,
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "ChoiceField",
                  "visible_conditions": [
                    {
                      "field_key": "cfdd",
                      "operator": "is_not_empty",
                      "value": ""
                    },
                    {
                      "field_key": "0cd8",
                      "operator": "is_not_empty",
                      "value": ""
                    }
                  ],
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": "any"
                },
                {
                  "allow_other": false,
                  "choices": [
                    {
                      "label": "target + light trap",
                      "value": "target + light trap"
                    },
                    {
                      "label": "reference + light trap",
                      "value": "reference + light trap"
                    },
                    {
                      "label": "lamp",
                      "value": "lamp"
                    },
                    {
                      "label": "lamp + target",
                      "value": "lamp + target"
                    },
                    {
                      "label": "light trap",
                      "value": "light trap"
                    }
                  ],
                  "data_name": "transmission_port_svc",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": null,
                  "disabled": true,
                  "hidden": false,
                  "key": "09f6",
                  "label": "Transmission Port",
                  "multiple": false,
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "ChoiceField",
                  "visible_conditions": [
                    {
                      "field_key": "cfdd",
                      "operator": "is_not_empty",
                      "value": ""
                    },
                    {
                      "field_key": "0cd8",
                      "operator": "is_not_empty",
                      "value": ""
                    }
                  ],
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": "any"
                },
                {
                  "allow_other": false,
                  "choices": [
                    {
                      "label": "reference + light trap",
                      "value": "reference + light trap"
                    },
                    {
                      "label": "light trap",
                      "value": "light trap"
                    },
                    {
                      "label": "target + light trap",
                      "value": "target + light trap"
                    }
                  ],
                  "data_name": "reflectance_port_svc",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": null,
                  "disabled": true,
                  "hidden": false,
                  "key": "3286",
                  "label": "Reflectance Port",
                  "multiple": false,
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "ChoiceField",
                  "visible_conditions": [
                    {
                      "field_key": "cfdd",
                      "operator": "is_not_empty",
                      "value": ""
                    },
                    {
                      "field_key": "0cd8",
                      "operator": "is_not_empty",
                      "value": ""
                    }
                  ],
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": "any"
                }
              ],
              "hidden": false,
              "key": "6825",
              "label": "Integrating Sphere Configuration",
              "required": false,
              "required_conditions": null,
              "required_conditions_type": null,
              "type": "Section",
              "visible_conditions": [
                {
                  "field_key": "7c72",
                  "operator": "equal_to",
                  "value": "SVC"
                },
                {
                  "field_key": "547e",
                  "operator": "equal_to",
                  "value": "integrating sphere"
                }
              ],
              "visible_conditions_behavior": "clear",
              "visible_conditions_type": "all"
            },
            {
              "data_name": "target",
              "default_value": null,
              "description": null,
              "disabled": false,
              "display": "inline",
              "elements": [
                {
                  "allow_other": false,
                  "choices": [
                    {
                      "label": "leaf",
                      "value": "leaf"
                    },
                    {
                      "label": "paper",
                      "value": "paper"
                    },
                    {
                      "label": "leaf array",
                      "value": "leaf array"
                    },
                    {
                      "label": "leaf array + paper",
                      "value": "leaf array + paper"
                    }
                  ],
                  "data_name": "target_type",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "The type of target being measured.",
                  "disabled": false,
                  "hidden": false,
                  "key": "4a74",
                  "label": "Target Type",
                  "multiple": false,
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "ChoiceField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                },
                {
                  "data_name": "leaf_is_not_bifacial",
                  "default_value": null,
                  "description": null,
                  "disabled": false,
                  "hidden": false,
                  "key": "4205",
                  "label": "Leaf is not bifacial.",
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "Label",
                  "visible_conditions": [
                    {
                      "field_key": "a40b",
                      "operator": "equal_to",
                      "value": "Not bifacial"
                    }
                  ],
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": "all"
                },
                {
                  "data_name": "leaf_side_measured",
                  "default_previous_value": false,
                  "default_value": "adaxial",
                  "description": "For a bifacial leaf, the leaf side (adaxial or abaxial) that is being measured.\n\nWhen using an integrating sphere, in reflectance mode this corresponds to the leaf side facing the inside of the sphere, whereas in transmittance mode this corresponds to the leaf side facing the outside of the sphere. This is true for both leaf as well as for reference measurements; in the latter case, the leaf is used to correct for substitution error.",
                  "disabled": true,
                  "hidden": false,
                  "key": "6192",
                  "label": "Leaf Side Measured",
                  "negative": {
                    "label": "Abaxial (lower)",
                    "value": "abaxial"
                  },
                  "neutral": {
                    "label": "Not bifacial",
                    "value": "not bifacial"
                  },
                  "neutral_enabled": false,
                  "positive": {
                    "label": "Adaxial (upper)",
                    "value": "adaxial"
                  },
                  "required": true,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "YesNoField",
                  "visible_conditions": [
                    {
                      "field_key": "4a74",
                      "operator": "not_equal_to",
                      "value": "paper"
                    },
                    {
                      "field_key": "a40b",
                      "operator": "not_equal_to",
                      "value": "Not bifacial"
                    }
                  ],
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": "all"
                },
                {
                  "data_name": "leaf_number",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "An identifier for the leaf or leaf array (for small leaves) on which spectral measurements are made.",
                  "disabled": false,
                  "format": "integer",
                  "hidden": false,
                  "key": "02bf",
                  "label": "Leaf Number",
                  "max": 99.0,
                  "max_length": null,
                  "min": 1.0,
                  "min_length": null,
                  "numeric": true,
                  "required": true,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "TextField",
                  "visible_conditions": [
                    {
                      "field_key": "4a74",
                      "operator": "not_equal_to",
                      "value": "paper"
                    }
                  ],
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": "all"
                },
                {
                  "data_name": "replicate_number",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "Replicate measurement within an individual leaf. In most cases there will only be one reflectance and one transmittance measurement per leaf. Only used in cases where there are multiple measurements of reflectance and/or transmittance within a leaf (e.g. individual leaflets for a compound leaf).",
                  "disabled": false,
                  "format": "integer",
                  "hidden": true,
                  "key": "c759",
                  "label": "Replicate Number",
                  "max": null,
                  "max_length": null,
                  "min": null,
                  "min_length": null,
                  "numeric": true,
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "TextField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                },
                {
                  "data_name": "branch_number",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "An identifier for the branch the leaf came from. In most cases, all leaves will come from the same branch.",
                  "disabled": false,
                  "format": "integer",
                  "hidden": true,
                  "key": "12ce",
                  "label": "Branch Number",
                  "max": null,
                  "max_length": null,
                  "min": 1.0,
                  "min_length": null,
                  "numeric": true,
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "TextField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                }
              ],
              "hidden": false,
              "key": "779a",
              "label": "Target",
              "required": false,
              "required_conditions": null,
              "required_conditions_type": null,
              "type": "Section",
              "visible_conditions": [
                {
                  "field_key": "09f6",
                  "operator": "equal_to",
                  "value": "target + light trap"
                },
                {
                  "field_key": "09f6",
                  "operator": "equal_to",
                  "value": "lamp + target"
                },
                {
                  "field_key": "3286",
                  "operator": "equal_to",
                  "value": "target + light trap"
                }
              ],
              "visible_conditions_behavior": "clear",
              "visible_conditions_type": "any"
            },
            {
              "data_name": "additional_info",
              "default_value": null,
              "description": null,
              "disabled": false,
              "display": "inline",
              "elements": [
                {
                  "data_name": "measurement_remarks",
                  "default_previous_value": false,
                  "default_value": null,
                  "description": "Comments or notes about the measurement.",
                  "disabled": false,
                  "hidden": false,
                  "key": "6e1e",
                  "label": "Measurement Remarks",
                  "max_length": null,
                  "min_length": null,
                  "numeric": false,
                  "pattern": null,
                  "pattern_description": null,
                  "required": false,
                  "required_conditions": null,
                  "required_conditions_type": null,
                  "type": "TextField",
                  "visible_conditions": null,
                  "visible_conditions_behavior": "clear",
                  "visible_conditions_type": null
                }
              ],
              "hidden": false,
              "key": "aa9b",
              "label": "Additional Info",
              "required": false,
              "required_conditions": null,
              "required_conditions_type": null,
              "type": "Section",
              "visible_conditions": null,
              "visible_conditions_behavior": "clear",
              "visible_conditions_type": null
            },
            {
              "data_name": "measurement_id",
              "default_previous_value": false,
              "default_value": null,
              "description": "DO NOT DELETE USED FOR ",
              "disabled": false,
              "format": "integer",
              "hidden": true,
              "key": "38ae",
              "label": "Measurement ID",
              "max": null,
              "max_length": null,
              "min": null,
              "min_length": null,
              "numeric": true,
              "required": true,
              "required_conditions": null,
              "required_conditions_type": null,
              "type": "TextField",
              "visible_conditions": null,
              "visible_conditions_behavior": "clear",
              "visible_conditions_type": null
            }
          ],
          "geometry_required": false,
          "geometry_types": [],
          "hidden": false,
          "key": "4b5c",
          "label": "Measurements",
          "max_length": null,
          "min_length": null,
          "required": true,
          "required_conditions": null,
          "required_conditions_type": null,
          "title_field_key": null,
          "title_field_keys": [
            "bbe5",
            "cfdd",
            "0cd8",
            "02bf"
          ],
          "type": "Repeatable",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "leaf_photos",
          "default_value": null,
          "description": "Photos of the leaves on which spectral measurements are made.",
          "disabled": false,
          "hidden": false,
          "key": "a127",
          "label": "Leaf Photos",
          "max_length": null,
          "min_length": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "PhotoField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "number_of_measurements",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": true,
          "format": "decimal",
          "hidden": true,
          "key": "1791",
          "label": "Number of Measurements",
          "max": null,
          "max_length": null,
          "min": null,
          "min_length": null,
          "numeric": true,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        }
      ],
      "hidden": false,
      "key": "3ff3",
      "label": "Spectral Measurements",
      "required": false,
      "required_conditions": null,
      "required_conditions_type": null,
      "type": "Section",
      "visible_conditions": [
        {
          "field_key": "1c2a",
          "operator": "equal_to",
          "value": "0"
        }
      ],
      "visible_conditions_behavior": "clear",
      "visible_conditions_type": "all"
    },
    {
      "data_name": "data_quality_control",
      "default_value": null,
      "description": null,
      "disabled": false,
      "display": "inline",
      "elements": [
        {
          "data_name": "deleted",
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "0f0e",
          "label": "Deleted",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "Label",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "deleted_by",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "2e53",
          "label": "Deleted By",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "date_deleted",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "4b80",
          "label": "Date Deleted",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "DateTimeField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "rejection",
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "6ca4",
          "label": "Rejection",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "Label",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "rejected_by",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "1e52",
          "label": "Rejected By",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "date_rejected",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "cd96",
          "label": "Date Rejected",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "DateTimeField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "verification",
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "53b1",
          "label": "Verification",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "Label",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "verified_by",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "fcb9",
          "label": "Verified By",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "date_verified",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "6112",
          "label": "Date Verified",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "DateTimeField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "submission",
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "482c",
          "label": "Submission",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "Label",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "submitted_by",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "6556",
          "label": "Submitted By",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "date_submitted",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "cd7e",
          "label": "Date Submitted",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "DateTimeField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "approbation",
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "e86f",
          "label": "Approbation",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "Label",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "approved_by",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "1d2c",
          "label": "Approved By",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "date_approved",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "2efb",
          "label": "Date Approved",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "DateTimeField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "publication",
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "2461",
          "label": "Publication",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "Label",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "published_by",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "d4b1",
          "label": "Published By",
          "max_length": null,
          "min_length": null,
          "numeric": false,
          "pattern": null,
          "pattern_description": null,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "date_published",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "hidden": false,
          "key": "d7d9",
          "label": "Date Published",
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "DateTimeField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        }
      ],
      "hidden": false,
      "key": "61ae",
      "label": "Data Quality Control",
      "required": false,
      "required_conditions": null,
      "required_conditions_type": null,
      "type": "Section",
      "visible_conditions": null,
      "visible_conditions_behavior": "clear",
      "visible_conditions_type": null
    },
    {
      "data_name": "hidden_variables",
      "default_value": null,
      "description": null,
      "disabled": false,
      "display": "inline",
      "elements": [
        {
          "data_name": "number_of_rejections",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "format": "decimal",
          "hidden": false,
          "key": "a2c1",
          "label": "Number of Rejections",
          "max": null,
          "max_length": null,
          "min": null,
          "min_length": null,
          "numeric": true,
          "required": false,
          "required_conditions": null,
          "required_conditions_type": null,
          "type": "TextField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        },
        {
          "data_name": "spectral_measurements_visibility",
          "default_previous_value": false,
          "default_value": null,
          "description": null,
          "disabled": false,
          "display": {
            "currency": null,
            "style": "number"
          },
          "expression": "if (\n  ISBLANK($computer)||\n  ISBLANK($spectroradiometer_id)||\n  ISBLANK($instrumentation_id)||\n  ISBLANK($panel_id)||\n  ISBLANK($sample)\n  ){\n  SETRESULT(1);\n} else {\n  SETRESULT(0);\n}",
          "hidden": false,
          "key": "1c2a",
          "label": "Spectral Measurements Visibility",
          "required": false,
          "required_conditions": [],
          "required_conditions_type": null,
          "type": "CalculatedField",
          "visible_conditions": null,
          "visible_conditions_behavior": "clear",
          "visible_conditions_type": null
        }
      ],
      "hidden": true,
      "key": "35eb",
      "label": "Hidden Variables",
      "required": false,
      "required_conditions": null,
      "required_conditions_type": null,
      "type": "Section",
      "visible_conditions": null,
      "visible_conditions_behavior": "clear",
      "visible_conditions_type": null
    }
  ],
  "geometry_required": false,
  "geometry_types": [
    "Point"
  ],
  "hidden_on_dashboard": false,
  "id": "",
  "image": "https://fulcrumapp.s3.amazonaws.com/form-images/a0c62d26-2fed-4f8f-808c-06648a2e96e7-3ee99689-cf77-421e-855d-ab0e09922257.png",
  "image_large": "https://fulcrumapp.s3.amazonaws.com/form-images/large_a0c62d26-2fed-4f8f-808c-06648a2e96e7-3ee99689-cf77-421e-855d-ab0e09922257.png",
  "image_small": "https://fulcrumapp.s3.amazonaws.com/form-images/small_a0c62d26-2fed-4f8f-808c-06648a2e96e7-3ee99689-cf77-421e-855d-ab0e09922257.png",
  "image_thumbnail": "https://fulcrumapp.s3.amazonaws.com/form-images/thumb_a0c62d26-2fed-4f8f-808c-06648a2e96e7-3ee99689-cf77-421e-855d-ab0e09922257.png",
  "name": "Leaf Spectra",
  "projects_enabled": true,
  "record_count": 584,
  "record_title_key": "269d",
  "script": "/* SAVE VERSIONS */\n\n/*****************************************************************\n\n            FUNCTIONS DATA EVENTS LEAF SPECTRA\n\n*******************************************************************/\n\n/*\nWARNING DATANAME MODIFICATIONS\n!!! DRAFT NOT FONCTIONNAL ANYMORE !!!\n\n*/\n\n/*\n * DEBUG\n */\nfunction viewConfig(){\n  SHOWERRORS(true);\n  ALERT(\">\"+INSPECT(CONFIG()));\n}\n\n/*\n * Protocols\n */\n// protocolsTab = Label visible for user and value (equivalent to dataname)\n// http://help.fulcrumapp.com/web-app/how-do-i-import-choice-lists\n// the dataname is used with dict to set the url\nprotocolsTab = getElementProtocols();\n\nfunction getElementProtocols(){\n  var els = CONFIG().elements;\n  for (el in els) {\n    var v = els[el].data_name;\n    if (EXISTS(v) && CONTAINS(v,'protocols')){\n      return els[el].choices;\n    }\n  }\n}\n\nfunction getProtocols(type){\n  var tab = [];\n  for (prot in protocolsTab) {\n    var v = protocolsTab[prot].label;\n    if (EXISTS(v) && CONTAINS(v,type)){\n      tab.push(protocolsTab[prot]);\n    }\n  }\n  return tab;\n}\n\nfunction getProtocolsLabel(type){\n  for (prot in protocolsTab) {\n    var v = protocolsTab[prot].label;\n    if (EXISTS(v) && CONTAINS(v,type)){\n      return protocolsTab[prot].label;\n    }\n  }\n  return '';  \n}\n\nfunction getProtocolsValue(label){\n  for (prot in protocolsTab) {\n    var v = protocolsTab[prot].label;\n    if (EXISTS(v) && CONTAINS(v,label)){\n      return protocolsTab[prot].value;\n    }\n  }\n  return '';  \n}\n\nfunction getProtocolsLabel(val){\n  for (prot in protocolsTab) {\n    var v = protocolsTab[prot].value;\n    if (EXISTS(v) && CONTAINS(v,val)){\n      return protocolsTab[prot].label;\n    }\n  }\n  return '';  \n}\n\nfunction leafLargerThanPort(){\n  protValueGV = getProtocolsValue('SVC Large Leaves');\n  protLabelGV = 'SVC Large Leaves';\n  SETCHOICES('protocol', getProtocols('Large'));\n  SETVALUE('protocol', protValueGV);\n  SETVALUE('protocol_url', protValueGV);\n}\n\nfunction leafSmallerThanPort(){\n  protValueGV = getProtocolsValue('SVC Small Leaves');\n  protLabelGV = 'SVC Small Leaves';\n  SETCHOICES('protocol', getProtocols('Small'));\n  SETVALUE('protocol', protValueGV);\n  SETVALUE('protocol_url', protValueGV);\n}\n\nfunction setProtocol(){\n  if ($leaf_larger_than_port == 'yes' || \n    ISBLANK($leaf_larger_than_port) ) {\n    leafLargerThanPort();\n  } else {\n    leafSmallerThanPort();\n  }\n  if (ISBLANK($leaf_larger_than_port)) {\n    SETVALUE('leaf_larger_than_port', \"yes\");\n  }\n}\n\n/*\n * CONFIGURATION\n */\n\n// Enable or disable manual location\nfunction setConfig4Draft(b){\n  if (b==true||b==false){\n    var config = {\n      drafts_enabled: b\n    };\n    SETFORMATTRIBUTES(config);\n  }\n}\n\nfunction setConfig4Location(b){\n  if (b==true||b==false){\n    var config = {\n      manual_location_enabled: b\n    };\n    SETFORMATTRIBUTES(config);\n  }\n}\n\nfunction setConfig4LocationDraft(b){\n  setConfig4Draft(b);\n  setConfig4Location(b);\n}\n\n/*\n * REPEATABLE\n */\n\nfunction repeatableVariableInDict(repeatableVariable,dataname){\n  var t = {};\n  var i = 0;\n  var o = REPEATABLEVALUES(repeatableVariable,dataname);\n  o.forEach(function(element) {\n    if(!EXISTS(element) || element=='' || !element){\n      t[i]=\"\";\n    } else if(EXISTS(element.choice_values)){\n      t[i]=element.choice_values;\n    } else {\n      t[i]=element;\n    }\n    i+=1;\n  });\n  return t;\n}\n\nfunction getSizeOfDict(dict){\n  return Object.keys(t).length;\n}\n\nfunction getNumOfSizeFor(repeatableVariable,dataname) {\n  if ($size_measurements != null){\n    return LEN(ARRAY(REPEATABLEVALUES(repeatableVariable,dataname)));\n  } else {\n    return 0;\n  }\n}\n\n/*\n * STATUS and ACCESS TO DATA\n */\nvar storageGV        = STORAGE();\nvar protLabelGV\t\t = \"\";\nvar protValueGV\t\t = \"\";\nvar projectNameGV    = \"\";\nvar fieldUserRolesGV = ['Standard User','Graduate Student']; // include more roles if needed\nvar usernameGV       = USERFULLNAME();\nvar readOnlyStatusesGV = ['deleted', 'verified', 'submitted', 'approved', 'published'];\nvar today = new Date();\n\nfunction isRejected(){\n  return (STATUS()=='rejected' || EXISTS($rejected_by));\n}\n\nfunction isVerified(){\n  return STATUS()=='verified';\n}\n\nfunction isStandardUser(){\n  return ISROLE(fieldUserRolesGV);\n}\n\nfunction isReadOnly(){\n  return CONTAINS(readOnlyStatusesGV, STATUS());\n}\n\nfunction isEditableByUsers(){\n  return ISROLE(fieldUserRolesGV) && !isReadOnly();\n}\n\nfunction isLocked4Users(){\n  return ISROLE(fieldUserRolesGV) && isReadOnly();\n}\n\nfunction getNumOfMeasurements() {\n  if ($measurements != null){\n    return LEN(ARRAY(REPEATABLEVALUES($measurements, 'measurement_id')));\n  } else {\n    return 0;\n  }\n}\n\nfunction setNumOfMeasurements() {\n  SETVALUE('number_of_measurements',getNumOfMeasurements());\n}\n\nfunction notSameMeasurementsNumber(){\n  if (VALUE('number_of_measurements')==getNumOfMeasurements()){\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction changeValues(){\n  DATANAMES().forEach(function(dataName) {\n    SETREADONLY(dataName, null);\n  });\n  loadDataQualityControl();\n  setConfig4LocationDraft(true);\n  //gpsAccessible(); // NO GPS NEEDED HERE\n}\n\nfunction readOnlyValues(){\n  DATANAMES().forEach(function(dataName) {\n    SETREADONLY(dataName, true);\n  });\n  loadDataQualityControl();\n  setConfig4LocationDraft(false);\n  //gpsNotAccessible(); // NO GPS NEEDED HERE\n}\n\n// NEED to hide the spectral_measurements in new repeatable leaf and read only mode\n// to prevent draft even if draft is not enable\nfunction hideMeasurementsValues(){\n  DATANAMES().forEach(function(dataName) {\n    SETHIDDEN('spectral_measurements', true);\n  });\n}\n\nfunction showMeasurementsValues(){\n  DATANAMES().forEach(function(dataName) {\n    SETHIDDEN('spectral_measurements', null);\n  });\n}\n\n/*\n * Data Quality Control View\n */\n\nfunction loadDataQualityControl(){\n  var readOnlyDataQuality = ['data_quality_control','deleted','deleted_by','date_deleted','verification','verified_by','date_verified','submission','submitted_by','date_submitted','approbation','approved_by','date_approved','rejection','rejected_by','date_rejected','publication','published_by','date_published'];\n  \n  readOnlyDataQuality.forEach(function(element) {\n    SETREADONLY(element, true);\n    SETHIDDEN(element,true);\n  });\n  \n  var status = STATUS();\n  if (status=='deleted'){\n    SETHIDDEN('data_quality_control',false);\n    SETHIDDEN('deleted',false);\n    SETHIDDEN('deleted_by',false);\n    SETHIDDEN('date_deleted',false);\n  } else {\n    if (status!='pending'){\n      SETHIDDEN('data_quality_control',false);\n      SETHIDDEN('verification',false);\n      SETHIDDEN('verified_by',false);\n      SETHIDDEN('date_verified',false);\n      if (isRejected()) {\n        SETHIDDEN('rejection',false);\n        SETHIDDEN('rejected_by',false);\n        SETHIDDEN('date_rejected',false);\n      }\n      if (status!='verified'){\n        SETHIDDEN('submission',false);\n        SETHIDDEN('submitted_by',false);\n        SETHIDDEN('date_submitted',false);\n      }\n      if (status=='published' || status=='approved'){\n        SETHIDDEN('approbation',false);\n        SETHIDDEN('approved_by',false);\n        SETHIDDEN('date_approved',false);\n      }\n      if (status=='published'){\n        SETHIDDEN('publication',false);\n        SETHIDDEN('published_by',false);\n        SETHIDDEN('date_published',false);\n      }\n    }\n  }\n}\n\n/*\n DRAFT test\nRecord link:    sample, computer, spectroradiometer_id instrumentation_id panel_id\nDate:           date_measured spectroradiometer_start_time\nText:           parent_directory working_folder base_file_name\nmulti choice:   measured_by leaf_larger_than_port \nrepeatable:     measurements\n\n** (small_leaf_protocol) [leaf_larger_than_port=\"no\", instrumentation_type=\"integrating sphere\"]\n\n*/\nfunction isDraft(){\n  var b = false;\n  if (!PROJECTNAME()) {\n    b = true;\n  }\n  var val = ['sample','date_measured','measured_by','spectroradiometer_start_time','computer','spectroradiometer_id','instrumentation_id','panel_id','parent_directory','working_folder','base_file_name','leaf_larger_than_port'];\n  val.forEach(function(element) {\n    if(!EXISTS(element) || VALUE(element)=='' || !VALUE(element)){\n      b = true;\n    }\n  });\n  var num = getNumOfMeasurements();\n  if (num<1){\n    //ALERT('num>'+num);\n    b = true;\n  } else {\n    // TEST FOR VALUES INSIDE REPEATABLE\n    /*\n    var m = repeatableVariableInDict($size_measurements,'mode');\n    var t = repeatableVariableInDict($size_measurements,'target');\n    var ls = repeatableVariableInDict($size_measurements,'leaf_side');\n    var ln = repeatableVariableInDict($size_measurements,'leaf_number');\n    var fn = repeatableVariableInDict($size_measurements,'file_name');\n    for (var i=0 ; i<num ; i++){\n      if (!EXISTS(m[i])){\n        b = true;\n      } else if (!EXISTS(fn[i])){\n        b = true;\n      }\n      if (!EXISTS(t[i])){\n        b = true;\n      } else if (!CONTAINS(t[i],'stray light') && (!EXISTS(ls[i]) || !EXISTS(ln[i]))){\n        b = true;\n      } else if (CONTAINS(t[i],'reference') && !EXISTS(ls[i])){\n        b = true;\n      } \n    }\n    */\n  }\n  return b;\n}\n\n/*\n * INTERVAL\n */\nfunction stopInterval(interval,tmp){\n  SETTIMEOUT(function() {\n    CLEARINTERVAL(interval);\n  }, tmp);\n}\n\n/*\n * DATE\n */\n//SOURCE: https://stackoverflow.com/a/23593099\nfunction formatYYYYMMDD(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day   = '' + d.getDate(),\n      year  = '' + d.getFullYear();\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n  return ''+year+'-'+month+'-'+day;\n}\n\n//SOURCE: https://stackoverflow.com/a/23593099\nfunction formatMMDDYY(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day   = '' + d.getDate(),\n      year  =  LAST(''+d.getFullYear(), 2).join('');\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n  return ''+month+day+year;\n}\n\nfunction getDateMMDDYYMesure() {\n  if ($date_measured) return formatMMDDYY($date_measured);\n  return '';\n}\n\nfunction getDateYYYYMMDDMesure() {\n  if ($date_measured) return formatYYYYMMDD($date_measured);\n  return '';\n}\n\nfunction setDateSaved(){\n  storageGV.setItem('date_saved',getDateMMDDYYMesure());\n}\n\nfunction getDateSaved(){\n  return storageGV.getItem('date_saved');\n}\n\nfunction setCurrentDaySaved(){\n  storageGV.setItem('current_day_saved',formatMMDDYY(new Date()));\n}\n\nfunction getCurrentDaySaved(){\n  return storageGV.getItem('current_day_saved');\n}\n\nfunction getCurrentDay(){\n  return formatMMDDYY(new Date());\n}\n\nfunction setSiteIdSaved(){\n  if ($site_id) storageGV.setItem('site_id_saved',VALUE('site_id'));\n  else storageGV.setItem('site_id_saved','');\n}\n\nfunction getSiteIdSaved(){\n  return storageGV.getItem('site_id_saved');\n}\n\n/*\n * PARENT PATH\n */\nfunction setParentPath(){\n  if (EXISTS(PROJECTNAME())){\n    SETVALUE('parent_directory',CONCATENATE(PROJECTNAME(), '/spectra'));\n  } else {\n    SETREADONLY('parent_directory', true);\n    SETVALUE('parent_directory','Select project first.');\n  }\n}\n\n/*\n * WORKING FOLDER\n */\nfunction fillWorkingFolder(){\n  var date = getDateYYYYMMDDMesure();\n  if (EXISTS($site_id) && date!='' && EXISTS($serial_number)) {\n    SETVALUE('working_folder',''+date+'-'+$site_id+'-'+$serial_number);\n  } else {\n    SETVALUE('working_folder','');\n  }\n}\n\nfunction setWorkingFolder(){\n  fillWorkingFolder();\n  stopInterval(SETINTERVAL(fillWorkingFolder, 1000),2100);\n}\n\n/*\n * BASE NAME\n */\nfunction fillBaseName(){\n  var v = '';\n  if ($manufacturer_short_name){\n    if ($manufacturer_short_name=='ASD'){\n      v = 'asd'+getDateMMDDYYMesure();\n    } else if ($manufacturer_short_name=='SVC'){\n      if ($computer_type === 'laptop') {\n        v = 'gr'+getDateMMDDYYMesure();\n      } else if ($computer_type === 'PDA') {\n        v = 'HR'+getDateMMDDYYMesure();\n      }\n    }\n  }\n  SETVALUE('base_file_name', v);\n}\n\nfunction setBaseName(){\n  fillBaseName();\n  stopInterval(SETINTERVAL(fillBaseName, 1000),2100);\n}\n\nfunction getBaseName(){\n  var v = VALUE('base_file_name');\n  if (v) return v;\n  return '';\n}\n\n/*\n * FOLDERS AND FILES\n */\nfunction setFoldersAndFilesAtStart(){\n  if (!isSameSavedAndCurrent()){\n    // Clean all values then no need to\n    SETVALUE('site_id','');\n    SETVALUE('base_file_name','');\n    SETVALUE('working_folder','');\n    SETVALUE('computer','');\n    SETVALUE('spectroradiometer_id',null);\n    SETVALUE('instrumentation_id',null);\n    SETVALUE('panel_id',null);\n    SETVALUE('computer_type','');\n    SETVALUE('instrumentation_type','');\n    SETVALUE('manufacturer_short_name','');\n    SETVALUE('serial_number','');\n    SETVALUE('date_measured',Date());\n    setFileNumber(0);\n  } else {\n    setFoldersAndFiles();\n  }\n}\n\nfunction setFoldersAndFiles(){\n  setParentPath();\n  setWorkingFolder();\n  setBaseName();\n}\n\n\n/*\n * FILE NAME\n */\nfunction setFileNumber(v){\n  storageGV.setItem('file_number',''+v);\n}\n\nfunction getFileNumber(){\n  return storageGV.getItem('file_number');\n}\n\nfunction getFN(){\n  var v = getFileNumber();\n  if (EXISTS(v)){\n    if (v.length==1) v = '000'+v;\n    if (v.length==2) v = '00'+v;\n    if (v.length==3) v = '0'+v;\n    return ''+v;\n  }\n  return '0000';\n}\n\nfunction getShortFileNumber(){\n  return '_'+getFN();\n}\n\nfunction getLongFileNumber(){\n  var v = getFN();\n  if (v.length==4) v = '0'+v;\n  return ''+v;\n}\n\nfunction fillFileName(){\n  var v = ''\n  if ($manufacturer_short_name){\n    if ($manufacturer_short_name=='ASD'){\n      v = ''+getBaseName()+getLongFileNumber();\n    } else if ($manufacturer_short_name=='SVC'){\n      v = ''+getBaseName()+getShortFileNumber();\n    }\n  }\n  SETVALUE('file_name',v);\n}\n\nfunction setFileName(){\n  fillFileName();\n  stopInterval(SETINTERVAL(fillFileName, 250),500);\n}\n\nfunction increaseFileNumber(){\n  setFileNumber(Number(getFileNumber())+1);\n}\n\n/*\n * FILE NUMBER\n */\nfunction setSpectrumNumber(){\n  var v = '';\n  if ($manufacturer_short_name){\n    if ($manufacturer_short_name=='ASD'){\n      if (LEN($spectrum_number)>5){\n        ALERT('Values are only between 0 and 99999');\n        v = FIRST(''+$spectrum_number,5).join('');\n      } else if (LEN($spectrum_number)>0 && LEN($spectrum_number)<6){\n        v = ''+$spectrum_number;\n      }\n    } else if ($manufacturer_short_name=='SVC'){\n      if (LEN($spectrum_number)>4){\n        ALERT('Values are only between 0 and 9999');\n        v = FIRST(''+$spectrum_number,4).join('');\n      } else if (LEN($spectrum_number)>0 && LEN($spectrum_number)<5){\n        v = ''+$spectrum_number;\n      }\n    }\n  }\n  if (v !=''){\n    SETVALUE('spectrum_number',v);\n    setFileName();\n    setFileNumber(v);\n  }\n}\n\nfunction isFileNumberIncrease(){\n  var n = 4;\n  if ($manufacturer_short_name=='ASD') n = 5;\n  var l = LAST($file_name, n);\n  var t = \"\";\n  var b = false;\n  for (var y = 0 ; y < LEN(l) ; y++){\n    if (l[y] != \"0\") b=true;\n    if (b) t += l[y];\n  }\n  if (t == \"\") t = \"0\";\n  return CONTAINS(t,getFileNumber());\n}\n\n/*\n * Same day?\n */\nfunction isSameSavedAndCurrent() {\n  var cs = getCurrentDaySaved();\n  var cd = getCurrentDay();\n  if (cs) {\n    if (cs != cd) return false;\n  } else {\n    return false;\n  }\n  \n  // I think this one is always true ...\n  var ds = getDateSaved();\n  var dd = getDateMMDDYYMesure();\n  if (ds) {\n    if ( ds != dd) return false;\n  }\n  var ss = getSiteIdSaved();\n  if ($site_id && ss){\n    if ($site_id!=ss) return false;\n  }\n  return true;\n}\n\n/*\n * makeGeneralOptionsReadOnly\n * 'properties_measured', 'leaf_sides_measured', 'leaf_larger_than_port', 'protocol', 'computer', 'spectroradiometer_id', 'instrumentation_id', 'panel_id', 'date_measured', 'measured_by', 'spectroradiometer_start_time', 'sample'\n */\nfunction makeGeneralOptionsReadOnly(b) {\n  var t = ['properties_measured', 'leaf_sides_measured', 'leaf_larger_than_port', 'protocol', 'computer', 'spectroradiometer_id', 'instrumentation_id', 'panel_id', 'date_measured', 'measured_by', 'spectroradiometer_start_time'];\n  t.forEach(function(element) {\n    SETREADONLY(element, b);\n  });\n}\n\nfunction testGeneralOptionsReadOnly(){\n  if (getNumOfMeasurements()>0){\n    makeGeneralOptionsReadOnly(true);\n  } else {\n    makeGeneralOptionsReadOnly(false);\n  }\n}\n\nfunction checkGeneralOptionsReadOnly(){\n  testGeneralOptionsReadOnly();\n  SETINTERVAL(testGeneralOptionsReadOnly, 1000);\n}\n\n/*\n * preselectValuesRegardingNumOfMeasurements();\n * depends on protocol\n */\nfunction preselectValuesRegardingNumOfMeasurements(){\n  var num = getNumOfMeasurements();\n  var scs = '';\n  var n = 0\n  if (CONTAINS(protLabelGV,'SVC Large Leaves')){\n    if (VALUE('properties_measured') == 'both') {\n      if (num<9){\n        scs = preselectValuesReflectanceSVCLL(num);\n      } else {\n        scs = preselectValuesTransmissionSVCLL(num-9);\n      }\n    } else if (VALUE('properties_measured') == 'reflectance') {\n      scs = preselectValuesReflectanceSVCLL(num);\n    } else if (VALUE('properties_measured') == 'transmittance') {\n      scs = preselectValuesTransmissionSVCLL(num);\n    }\n    setLeafProtocolOptionsSVCLL(scs);\n  }\n  if (CONTAINS(protLabelGV,'SVC Small Leaves')){\n    if (VALUE('properties_measured') == 'both') {\n      if (num<21){\n        scs = preselectValuesReflectanceSVCSL(num);\n      } else {\n        scs = preselectValuesTransmissionSVCSL(num-21);\n      }\n    } else if (VALUE('properties_measured') == 'reflectance') {\n      scs = preselectValuesReflectanceSVCSL(num);\n    } else if (VALUE('properties_measured') == 'transmittance') {\n      scs = preselectValuesTransmissionSVCSL(num);\n    }\n    setLeafProtocolOptionsSVCSL(scs);\n  }\n}\n\nfunction preselectValuesReflectanceSVCLL(num){\n  var scs = '';\n  var tab = ['A: Reflectance','B: Reflectance','C: Reflectance']\n  if (num<3){\n    SETVALUE('sphere_configuration_svc_large_leaves',tab[num]);\n    scs = tab[num];\n    if (num!=1){\n      SETVALUE('leaf_number',1);\n    }\n  } else if (num<8) {\n    SETVALUE('sphere_configuration_svc_large_leaves',tab[2]);\n    scs = tab[2];\n    SETVALUE('leaf_number',num-1);\n  } else if (num<9){\n    SETVALUE('sphere_configuration_svc_large_leaves',tab[0]);\n    scs = tab[0];\n    SETVALUE('leaf_number',1);\n  }\n  return scs;\n}\n\nfunction preselectValuesReflectanceSVCSL(num){\n  var scs = '';\n  var tab = ['A: Reflectance','B: Reflectance','C: Reflectance','D: Reflectance','E: Reflectance','F: Reflectance','G: Reflectance']\n  if (num<7){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[num]);\n    scs = tab[num];\n    if (!(num>1 && num<5)){\n      SETVALUE('leaf_number',1);\n    }\n  } else if (num<8) {\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[5]);\n    scs = tab[5];\n    SETVALUE('leaf_number',2);\n  } else if (num<9){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[6]);\n    scs = tab[6];\n    SETVALUE('leaf_number',2);\n  } else if (num<10) {\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[5]);\n    scs = tab[5];\n    SETVALUE('leaf_number',3);\n  } else if (num<11){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[6]);\n    scs = tab[6];\n    SETVALUE('leaf_number',3);\n  } else if (num<12){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[0]);\n    scs = tab[0];\n    SETVALUE('leaf_number',1);\n  } else if (num<13){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[1]);\n    scs = tab[1];\n    SETVALUE('leaf_number',1);\n  } else if (num<14) {\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[5]);\n    scs = tab[5];\n    SETVALUE('leaf_number',4);\n  } else if (num<15){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[6]);\n    scs = tab[6];\n    SETVALUE('leaf_number',4);\n  } else if (num<16) {\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[5]);\n    scs = tab[5];\n    SETVALUE('leaf_number',5);\n  } else if (num<17){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[6]);\n    scs = tab[6];\n    SETVALUE('leaf_number',5);\n  } else if (num<18) {\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[5]);\n    scs = tab[5];\n    SETVALUE('leaf_number',6);\n  } else if (num<19){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[6]);\n    scs = tab[6];\n    SETVALUE('leaf_number',6);\n  } else if (num<20){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[0]);\n    scs = tab[0];\n    SETVALUE('leaf_number',1);\n  } else if (num<21){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[1]);\n    scs = tab[1];\n    SETVALUE('leaf_number',1);\n  }\n  return scs;\n}\n\nfunction preselectValuesTransmissionSVCLL(num){\n  var scs = '';\n  var tab = ['D: Transmittance','E: Transmittance'];\n  if (num<1){\n    SETVALUE('sphere_configuration_svc_large_leaves',tab[0]);\n    scs = tab[0];\n    SETVALUE('leaf_number',1);\n  } else if (num<7){\n    SETVALUE('sphere_configuration_svc_large_leaves',tab[1]);\n    scs = tab[1];\n    SETVALUE('leaf_number',num);\n  } else if (num<8){\n    SETVALUE('sphere_configuration_svc_large_leaves',tab[0]);\n    scs = tab[0];\n    SETVALUE('leaf_number',1);\n  }\n  return scs;\n}\n\nfunction preselectValuesTransmissionSVCSL(num){\n  var scs = '';\n  var tab = ['H: Transmittance','I: Transmittance'];\n  if (num<1){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[0]);\n    scs = tab[0];\n    SETVALUE('leaf_number',1);\n  } else if (num<7){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[1]);\n    scs = tab[1];\n    SETVALUE('leaf_number',num);\n  } else if (num<8){\n    SETVALUE('sphere_configuration_svc_small_leaves',tab[0]);\n    scs = tab[0];\n    SETVALUE('leaf_number',1);\n  }\n  return scs;\n}\n\nfunction setLeafProtocolOptionsSVCLL(scs){\n  if (CONTAINS(scs,'A:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'target + light trap');\n    SETVALUE('reflectance_port_svc', 'reference');\n  }\n  if (CONTAINS(scs,'B:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'reference + light trap');\n    SETVALUE('reflectance_port_svc', 'light trap');\n  } else {\n    SETVALUE('target_type', 'leaf');\n    SETREADONLY('target_type', true);\n  }\n  if (CONTAINS(scs,'C:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'reference + light trap');\n    SETVALUE('reflectance_port_svc', 'target + light trap');\n  }\n  if (CONTAINS(scs,'D:')) {\n    SETVALUE('primary_light_port_svc', 'plug');\n    SETVALUE('transmission_port_svc', 'lamp');\n    SETVALUE('reflectance_port_svc', 'target + light trap');\n  } \n  if (CONTAINS(scs,'E:')) {\n    SETVALUE('primary_light_port_svc', 'plug');\n    SETVALUE('transmission_port_svc', 'lamp + target');\n    SETVALUE('reflectance_port_svc', 'light trap');\n  }\n}\n\nfunction setLeafProtocolOptionsSVCSL(scs){\n  if (CONTAINS(scs,'A:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'target + light trap');\n    SETVALUE('reflectance_port_svc', 'reference');\n    SETVALUE('target_type', 'leaf array');\n  }\n  \n  if (CONTAINS(scs,'B:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'target + light trap');\n    SETVALUE('reflectance_port_svc', 'reference');\n    SETVALUE('target_type', 'leaf array + paper');\n  }\n  \n  if (CONTAINS(scs,'C:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'target + light trap');\n    SETVALUE('reflectance_port_svc', 'reference');\n    SETVALUE('target_type', 'paper');\n  }\n  \n  if (CONTAINS(scs,'D:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'reference + light trap');\n    SETVALUE('reflectance_port_svc', 'light trap');\n  } else {\n    SETREADONLY('target_type', true);\n  }\n  \n  if (CONTAINS(scs,'E:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'reference + light trap');\n    SETVALUE('reflectance_port_svc', 'target + light trap');\n    SETVALUE('target_type', 'paper');\n  }\n  \n  if (CONTAINS(scs,'F:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'reference + light trap');\n    SETVALUE('reflectance_port_svc', 'target + light trap');\n    SETVALUE('target_type', 'leaf array + paper');\n  }\n  \n  if (CONTAINS(scs,'G:')) {\n    SETVALUE('primary_light_port_svc', 'lamp');\n    SETVALUE('transmission_port_svc', 'reference + light trap');\n    SETVALUE('reflectance_port_svc', 'target + light trap');\n    SETVALUE('target_type', 'leaf array');\n  }\n  \n  if (CONTAINS(scs,'H:')) {\n    SETVALUE('primary_light_port_svc', 'plug');\n    SETVALUE('transmission_port_svc', 'lamp');\n    SETVALUE('reflectance_port_svc', 'target + light trap');\n    SETVALUE('target_type', 'leaf array');\n  }\n  \n  if (CONTAINS(scs,'I:')) {\n    SETVALUE('primary_light_port_svc', 'plug');\n    SETVALUE('transmission_port_svc', 'lamp + target');\n    SETVALUE('reflectance_port_svc', 'light trap');\n    SETVALUE('target_type', 'leaf array');\n  }\n}\n\n\n/*****************************************************************\n                        FUNCTION CALL\n******************************************************************/\nfunction callback(event) {\n\n  /*****************************\n            LOAD RECORD\n  ******************************/\n  if (event.name === 'load-record') {\n    // Grab the project name\n    projectNameGV = PROJECTNAME();\n    if (ISROLE(fieldUserRolesGV)) {\n      SETSTATUSFILTER(['pending']);\n    }\n    changeValues();\n    //viewConfig();\n    setProtocol();\n    getElementProtocols();\n    checkGeneralOptionsReadOnly();\n  }\n  \n  /*****************************\n            NEW RECORD\n  ******************************/\n  if (event.name === 'new-record') {\n    SETVALUE('measured_by', usernameGV);\n    loadDataQualityControl();\n    setFoldersAndFilesAtStart();\n  }\n\n  /*****************************\n            EDIT RECORD\n  ******************************/\n  if (event.name === 'edit-record') {\n    /*\n    - For field users, only show 'submitted' status when 'verified'\n      if the current role is one of the designated field user roles...\n    - make record and read-only if verified, submitted, approved or published\n    - lock status and project to all standard users when verified except person who verified\n    - lock status to all standard users when submitted\n    */\n    if (isReadOnly()){ // \n      // make read-only\n      readOnlyValues();\n      setConfig4LocationDraft(false);\n      if (isStandardUser()){\n        // add the submitted status\n        SETSTATUSFILTER(['pending', 'verified', 'submitted', 'deleted']);\n        if (isRejected()){\n          SETSTATUSFILTER(['rejected', 'verified', 'submitted', 'deleted']);\n        }\n        // lock the record status\n        SETREADONLY('@status', true);\n        //... except for verified by the standard user who verified the record\n        if ((usernameGV == $verified_by) && (STATUS() == 'verified')) {\n          SETREADONLY('@status', false);\n        }\n      }\n    } else {\n      if (!isDraft() && isStandardUser()){\n        SETSTATUSFILTER(['pending', 'verified', 'deleted']);\n        if (isRejected()){\n          SETSTATUSFILTER(['rejected', 'verified', 'deleted']);\n        }\n      }\n      SETREADONLY('@status', false);\n    }\n  }\n\n  /*****************************\n            VALIDATE RECORD\n  ******************************/\n  if (event.name === 'validate-record') {\n    if (!PROJECTNAME()) {\n      INVALID('Select a project before saving.');\n    }\n    if (notSameMeasurementsNumber() && isReadOnly() && STATUS()!='deleted'){\n      INVALID('You can not change the number of leaves in readonly mode.');\n    }\n    if (!isReadOnly()){\n      setNumOfMeasurements();\n    }\n    setSiteIdSaved();\n    setCurrentDaySaved();\n    setDateSaved();\n    if ($manufacturer_short_name != $manufacturer_short_name_sphere) {\n      INVALID('The spectroradiometer is not from the same manufacturer as the integrating sphere.');\n    }\n  }\n\n  /*****************************\n            SAVE RECORD\n  ******************************/\n  if (event.name === 'save-record') {\n    if (isReadOnly()) {\n      SETPROJECT(projectNameGV);\n    }\n  }\n  \n  /*****************************\n            CHANGE STATUS\n  ******************************/\n  if (event.name === 'change-status') {\n    var today = new Date();\n    var status = STATUS();\n\n    if (status == 'pending'|| status == 'rejected') {\n      changeValues();\n    }\n\n    if (status == 'pending') {\n      if (isStandardUser()){\n        SETSTATUSFILTER(['pending']);\n      }\n    } else if (status == 'rejected') {\n      if (isStandardUser()){\n        SETSTATUSFILTER(['rejected']);\n      } else {\n        var numR = 1;\n        if (EXISTS($number_of_rejections)){\n          numR = $number_of_rejections+1;\n        }\n        SETVALUE('number_of_rejections',numR);\n        SETVALUE('rejected_by', usernameGV);\n        SETVALUE('date_rejected', today);\n      }\n    } else if (status == 'verified') {\n      readOnlyValues();\n      setNumOfMeasurements();\n      setConfig4LocationDraft(false);\n      SETVALUE('verified_by', usernameGV);\n      SETVALUE('date_verified', today);\n      projectNameGV = PROJECTNAME();\n      ALERT('This will make the record read-only for all other standard users.');\n    } else if (status == 'deleted') {\n      readOnlyValues();\n      SETVALUE('deleted_by', usernameGV);\n      SETVALUE('date_deleted', today);\n      ALERT('This will make the record read-only for all other standard users. Deleted records can no longer be edited by standard users.');\n    } else if (status == 'submitted') {\n      SETVALUE('submitted_by', usernameGV);\n      SETVALUE('date_submitted', today);\n      ALERT('This will submit the record to the data manager for approval. Submitted records can no longer be edited by standard users.');\n    } else if (status == 'approved') {\n      SETVALUE('approved_by', usernameGV);\n      SETVALUE('date_approved', today);\n    } else if (status == 'published') {\n      SETVALUE('published_by', usernameGV);\n      SETVALUE('date_published', today);\n    }\n    loadDataQualityControl();\n  }\n\n  /*****************************\n            CHANGE PROJECT\n  ******************************/\n  // save user name and date for data control steps\n  if (event.name === 'change-project') {\n    if (projectNameGV != \"\" && isReadOnly()) {\n      ALERT('The project cannot be changed under the current status.');\n      SETPROJECT(projectNameGV);\n    }\n    setParentPath();\n  }\n\n  /*****************************\n            CHANGE GEOMETRY\n  ******************************/\n  if (event.name === 'change-geometry') {\n  }\n\n  /*****************************\n            CHANGE\n  ******************************/\n  if (event.name === 'change'){\n    if (event.field === 'filter_site') {\n      //  clear previous site ID values if site record link unselected\n      if (ISBLANK($filter_site)) {\n        SETVALUE('filter_site_id', null);\n      }\n      SETVALUE('sample','');\n      SETVALUE('site_id','');\n      SETVALUE('sample_id','');\n      SETVALUE('scientific_name','');\n    }\n    \n    if (event.field === 'sample') {\n      //  clear filter_site values once sample is selected\n      if (!ISBLANK($sample)) {\n        SETVALUE('filter_site_id', '');\n        SETVALUE('filter_site', '');\n        setWorkingFolder();\n      } else {\n        SETVALUE('site_id','');\n        SETVALUE('sample_id','');\n        SETVALUE('scientific_name','');\n      }\n    }\n    \n    if (event.field === 'date_measured') {\n      setFoldersAndFilesAtStart();\n    }\n    \n    if (event.field === 'spectroradiometer_id') {\n      if (!EXISTS($spectroradiometer_id)){\n        SETVALUE('manufacturer_short_name','');\n      }\n      setFoldersAndFiles();\n    }\n    \n    if (event.field === 'leaf_larger_than_port') {\n      setProtocol();\n    }\n    \n    if (event.field === 'protocol') {\n      if (ISBLANK($protocol)){\n        setProtocol();\n      } else {\n        SETVALUE('protocol_url', CHOICEVALUE($protocol));\n      }\n    }\n    \n    if (event.field === 'leaf_sides_measured') {\n      var lsmv = CHOICEVALUES($leaf_sides_measured);\n      if (CONTAINS(lsmv,'Not bifacial')){\n        SETVALUE('leaf_sides_measured', ['Not bifacial']);\n      } else {\n        if (ISBLANK($leaf_sides_measured)){\n          SETVALUE('leaf_sides_measured', ['Adaxial (upper)']);\n        }\n      }\n    }\n    \n    //\n    // REPEATABLE\n    //\n    if (event.field === 'target') {\n      SETVALUE('leaf_side', null);\n    }\n    if (event.field === 'spectrum_number') {\n      setSpectrumNumber();\n    }\n    \n    // SVC sphere configuration\n    if (event.field == 'sphere_configuration_svc_small_leaves') {\n      if (ISBLANK($sphere_configuration_svc_small_leaves)) {\n        SETVALUE('primary_light_port_svc', null);\n        SETVALUE('transmission_port_svc', null);\n        SETVALUE('reflectance_port_svc', null);\n      }\n      if (CONTAINS(protLabelGV,'SVC Small Leaves')){\n        var scs = CHOICEVALUE($sphere_configuration_svc_small_leaves);\n        setLeafProtocolOptionsSVCSL(scs);\n      }\n    }\n    \n    if (event.field == 'sphere_configuration_svc_large_leaves') {\n      //  clear previous site ID values if site record link unselected\n      if (ISBLANK($sphere_configuration_svc_large_leaves)) {\n        SETVALUE('primary_light_port_svc', null);\n        SETVALUE('transmission_port_svc', null);\n        SETVALUE('reflectance_port_svc', null);\n      }\n      if (CONTAINS(protLabelGV,'SVC Large Leaves')){\n        var scs = CHOICEVALUE($sphere_configuration_svc_large_leaves);\n        setLeafProtocolOptionsSVCLL(scs);\n      }\n    }\n  }\n\n  /*****************************\n            CLICK\n  ******************************/\n  if (event.name === 'click'){\n  }\n\n  /*****************************\n            REPEATABLE\n  ******************************/\n  if (event.name === 'load-repeatable'){\n    if (event.field === 'measurements') {\n      SETVALUE('measurement_id', REPEATABLENUMBER());\n      if (CONTAINS(protLabelGV,'SVC Large Leaves')){\n        SETCHOICES('target_type', 'leaf');\n      }\n    }\n    if (VALUE('leaf_larger_than_port')=='yes'){\n      SETHIDDEN('sphere_configuration_svc_large_leaves',false);\n      SETHIDDEN('sphere_configuration_svc_small_leaves',true);\n    } else if (VALUE('leaf_larger_than_port')=='no'){\n      SETHIDDEN('sphere_configuration_svc_large_leaves',true);\n      SETHIDDEN('sphere_configuration_svc_small_leaves',false);\n    } else {\n      ALERT(VALUE('leaf_larger_than_port'));\n    }\n    // sphere_configuration_svc_large_leaves\n    if (VALUE('properties_measured') != 'both') {\n      SETCHOICEFILTER('sphere_configuration_svc_large_leaves',VALUE('properties_measured'));\n      SETCHOICEFILTER('sphere_configuration_svc_small_leaves',VALUE('properties_measured'));\n    } else {\n      SETCHOICEFILTER('sphere_configuration_svc_large_leaves',null);\n      SETCHOICEFILTER('sphere_configuration_svc_small_leaves',null);\n    }\n  }\n  \n  if (event.name === 'new-repeatable'){\n    if (event.field === 'measurements') {\n      fillFileName();\n      SETVALUE('spectrum_number',getFileNumber());\n      \n      var lsmv = CHOICEVALUES($leaf_sides_measured);\n      if (!CONTAINS(lsmv,'Adaxial (upper)')){\n        // means it contains the other option Abaxial (lower)\n        //leaf_side_measured is read only\n        SETREADONLY('leaf_side_measured',true);\n        //leaf_side_measured is equal to Abaxial (lower)\n        SETVALUE('leaf_side_measured', 'abaxial');\n      } else if (!CONTAINS(lsmv,'Abaxial (lower)')){\n        //  means it contains the other option Adaxial (upper)\n        //leaf_side_measured is read only\n        SETREADONLY('leaf_side_measured',true);\n        //leaf_side_measured is equal to Adaxial (upper)\n        SETVALUE('leaf_side_measured', 'adaxial');\n      } else {\n        // means it contains the two options\n        SETREADONLY('leaf_side_measured',false);\n        //leaf_side_measured is not read only\n      }\n      preselectValuesRegardingNumOfMeasurements();\n    }\n  }\n  \n  if (event.name === 'validate-repeatable'){\n    if (event.field === 'measurements') {\n      if (isReadOnly()) {\n        INVALID('You cannot add or change measurements under the current status');\n      }\n      if (isFileNumberIncrease()){\n        increaseFileNumber();\n      }\n    }\n  }\n  if (event.name === 'save-repeatable'){\n    if (event.field === 'measurements') {\n      //makeGeneralOptionsReadOnly(true);\n    }\n  }\n}\n\n/********** FUNCTIONS **********/\nON('load-record', callback);\nON('new-record', callback);\nON('edit-record', callback);\nON('validate-record', callback);\nON('save-record', callback);\nON('change-status', callback);\nON('change-project', callback);\nON('change','filter_site', callback);\nON('change','sample', callback);\nON('change','date_measured', callback);\nON('change','target', callback);\nON('change','leaf_larger_than_port', callback);\nON('change','spectroradiometer_id', callback);\nON('change','sphere_configuration_svc_large_leaves', callback);\nON('change','sphere_configuration_svc_small_leaves', callback);\nON('change','protocol', callback);\nON('change','leaf_sides_measured', callback);\nON('new-repeatable', 'measurements', callback);\nON('load-repeatable', 'measurements', callback);\nON('validate-repeatable', 'measurements', callback);\nON('save-repeatable', 'measurements', callback);\nON('change','spectrum_number', callback);\n",
  "status_field": {
    "choices": [
      {
        "color": "#FF8819",
        "label": "Pending Verification",
        "value": "pending"
      },
      {
        "color": "#CB0D0C",
        "label": "Rejected",
        "value": "rejected"
      },
      {
        "color": "#1891C9",
        "label": "Verified",
        "value": "verified"
      },
      {
        "color": "#87D30F",
        "label": "Submitted",
        "value": "submitted"
      },
      {
        "color": "#2D5D00",
        "label": "Approved",
        "value": "approved"
      },
      {
        "color": "#2D5D00",
        "label": "Published",
        "value": "published"
      },
      {
        "color": "#242424",
        "label": "Deleted",
        "value": "deleted"
      }
    ],
    "data_name": "record_status",
    "default_previous_value": false,
    "default_value": "pending",
    "description": "Status of record. Record first requires verification. Once verified, it can be submitted for approval; this locks the record for standard users. If approved, the record eventually gets published. If rejected, it goes back to standard users for further verification.",
    "disabled": false,
    "enabled": true,
    "hidden": false,
    "key": "@status",
    "label": "Record Status",
    "read_only": false,
    "required": false,
    "type": "StatusField"
  },
  "title_field_keys": [
    "269d",
    "6989",
    "a950"
  ],
  "updated_at": "2018-09-12T19:53:06Z",
  "version": 60
}
